#! /bin/zsh

if [[ "$HOST" = *"uwaterloo.ca" ]]; then
    export PATH=$HOME/bin:$PATH
elif [[ "$HOST" = "ugcpu"* ]]; then
    # export DISPLAY=0.0

    export PATH=$HOME/.local/bin:$PATH
    export LD_LIBRARY_PATH=~/.local/lib:$LD_LIBRARY_PATH
    
    # git
    export PATH=/usr/local/software/git/bin:$PATH

    # python 3.11
    export PATH=/usr/local/packages/python/python-3.11/bin:$PATH

    # CUDA 11
    export LD_LIBRARY_PATH=/usr/local/cuda-11/lib64:$LD_LIBRARY_PATH

    # gcc11
    export PATH=/usr/local/GNU/gcc11/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/GNU/gcc11/lib64:$LD_LIBRARY_PATH

    # cmake
    export PATH=/usr/local/software/cmake/bin:$PATH

    # OpenMPI
    export PATH=$HOME/.local/openmpi/bin:$PATH

    # Node.JS
    # export PATH=$HOME/data/node/bin:$PATH

    # Qt
    # export PATH=/usr/local/software/qt6/bin:$PATH
    # export QT_DEBUG_PLUGINS=1

    # Tex
    export PATH=~/.local/texlive/bin/x86_64-linux:$PATH
    export MANPATH=~/.local/texlive/texmf-dist/doc/man:$MANPATH
    export INFOPATH=~/.local/texlive/texmf-dist/doc/info:$INFOPATH

    # TikZiT
    export PATH=~/.local/tikzit/bin:$PATH

    # export LD_LIBRARY_PATH=/data1/jackkyyh/tikzit-bin/lib:$LD_LIBRARY_PATH
    # export LD_LIBRARY_PATH=$HOME/.local/openmpi/lib/:$LD_LIBRARY_PATH
    
    # Q++
    # export CPATH=$HOME/.local/qpp/include/:$CPLUS_INCLUDE_PATH
    
    # Eigen
    # export CPATH=$HOME/.local/eigen-3.4.0:$CPLUS_INCLUDE_PATH

    # export NCCL_HOME=/data/jackkyyh/nccl/build
    # export PATH=/usr/local/bin/python-csd-3.8:/homes/jhuangbo/.dotnet:/homes/jhuangbo/.dotnet/tools:$PATH
    # export DOTNET_ROOT=/homes/jhuangbo/.dotnet

    export PYTHONUSEBASE=$WORK
elif [[ $OSTYPE = 'darwin'* ]]; then
    load_local_efi(){
        sudo diskutil mount disk0s1
        open /Volumes/EFI/EFI/OC/config.plist 
    }

    load_king_efi(){
        sudo diskutil mount disk2s1
        open /Volumes/KING_EFI/EFI/OC/config.plist 
    }

    xldis(){
        whitelist=(applications details downloadhistory liveupdate preferences searchtask viptask xlplayer)
        cd /Applications/Thunder.app/Contents/PlugIns
        chmod a-x *.xlplugin
        for f in $whitelist; do chmod a+x $f.xlplugin; done
    }

    alias pdfcombine="/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py"
    alias sqimg="~/Documents/sqimg.py"
fi

#force_color_prompt=yes
# alias graphic="sudo init 5"
# alias commandline="sudo init 2"
alias untar="tar -xvf"
# alias sblk="setterm -blank 5 -powersave on -powerdown 10"
# alias sbatt="echo -n 'Battery: ' ; cat /sys/class/power_supply/BAT1/capacity | tr '\n' ' '; echo '%'"
# alias my_upgrade="sudo apt update; sudo apt -y upgrade"
# alias my_autoremove="sudo apt autoremove"
# alias sql='~/3311/sqlcl/bin/sql -l comp3311stu021/xvwzofea@dbsvr1.cse.ust.hk/comp3311.cse.ust.hk'
# alias tlmgr="sudo /usr/local/texlive/2019/bin/x86_64-linux/tlmgr"
# alias my_VPN="echo 'Please open Duo Mobile...'; /usr/local/pulse/pulsesvc -h remote.ust.hk -u jhuangbo -p JackyH234@#$ -r HKUST; echo 'VPN exits'"
# alias my_blauth="sudo chmod a+w /sys/class/backlight/intel_backlight/brightness"

# alias toggle_keyboard='[[ `xinput list | grep -P "AT Translated Set 2 keyboard.*\[slave  keyboard \(\d\)\]"` ]] && echo `xinput float "AT Translated Set 2 keyboard"; echo Built-in keyboard disabled` || echo `xinput reattach "AT Translated Set 2 keyboard" 3; echo Built-in keyboard enabled`'
# alias rotate_touchpad='[[ `xinput list-props "SynPS/2 Synaptics TouchPad" | grep -P ".*:\t1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000"` ]] && xinput set-prop "SynPS/2 Synaptics TouchPad" --type=float "Coordinate Transformation Matrix" 0 1 0 -1 0 1 0 0 1 || xinput set-prop "SynPS/2 Synaptics TouchPad" --type=float "Coordinate Transformation Matrix" 1 0 0 0 1 0 0 0 1; echo TouchPad rotated'


alias vimrc="vim ~/.vimrc"
alias zshrc="vim ~/.zshrc"
alias my="vim ~/.myrc"
alias tmux.conf="vim ~/.tmux.conf"
alias gshort="vim ~/.oh-my-zsh/plugins/git/README.md"

bindkey -v
bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^w' backward-kill-word
bindkey '^o' beginning-of-line
bindkey '^a' end-of-line


CSL="jhuangbo@csl2wk01.cse.ust.hk"
UGCPU4="jhuangbo@ugcpu4.cse.ust.hk"
UGCPU5="jhuangbo@ugcpu5.cse.ust.hk"
PORT="-L 10450:localhost:10450"
# UGCPU5_DIR=$UGCPU5":/localdata/jackkky"
# alias my_sshcpu4="ssh -L 10440:localhost:10440 -L 10441:localhost:10441 -L 10442:localhost:10442 $UGCPU4"
# alias my_sshcpu5="ssh -L 10450:localhost:10450 -L 10451:localhost:10451 -L 10452:localhost:10452 $UGCPU5"
# SSH_MAP="-L 10450:localhost:10450 -L 10451:localhost:10451 -L 10452:localhost:10452 -L 10453:localhost:10453 "
# SSH_MAP="-L 10450:localhost:10450"
# LAPTOP="jacky@10.89.4.32"


# my_brightness(){
#     pat=/sys/class/backlight/intel_backlight/brightness
#     cur=`cat $pat`
#     new=`expr $cur + ${1}`
#     echo "New brightness: $new"
#     echo $new > $pat
# }

# my_latex(){
#     if [ ! -f ${1}.tex ]; then
#         echo "File ${1}.tex not found"
#         return 1
#     fi;

#     while true;
#     do
#             sleep 1;
#             if [ ! -f ${1}.log ] || [ ${1}.tex -nt ${1}.log ]
#             then
#                     pdflatex -halt-on-error -file-line-error ${1}.tex;
#                     echo "new version at " `date +%T`
#             fi;
#     done
# }

if [[ -n $SSH_CONNECTION ]]; then
    mydrive () {
        onedrive --synchronize --dry-run

        echo ""
        echo -n "Type y to confirm: "
        read -q -s t
            echo ""
        if [[ $t = "y" ]]
        then
            onedrive --synchronize
        fi
    }
fi


